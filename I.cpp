# include <iostream>
using namespace std;
/*int sign(double x) {
	if (x < 0) return -1;
	if (x == 0) return 0; 
	if (x > 0) return 1;
	
}
int rootscount(double A, double B, double C) {
	double d = B * B - 4 * A * C; 
	if (d == 0) return 1; 
	if (d < 0) return 0; 
	if (d > 0) return 2;
}
  double S; 
  int CircleS(double R) {
	double S = 3.14 * R * R; 
	return S; 
}

int RingS(double R1, double R2) {
	double s = 3.14 * (R1 * R1 - R2 * R2);
	return s;
  
}
int TriangleP(double a, double h) { 
	double B = sqrt(pow(a / 2, 2) + pow(h, 2)); 
	return B; 
 }*/
int sum = 0; 
int SumRange(int a, int b) {
	for (a = 1; a <= b; a++) {
		
	}
}
int main() {
	setlocale(LC_ALL, "Russian"); 
	//Описать функцию Sign(X) целого типа, возвращающую для вещественного числа X следующие значения:
	//−1, если X < 0; 0, если X = 0; 1, если X > 0
	//С помощью этой функции найти значение выражения Sign(A) + Sign(B)
		//для данных вещественных чисел A и B.
	/*double a, b; 
	std::cin >> a >> b; 
	std::cout << sign(a) + sign(b);

// Описать функцию RootsCount(A, B, C) целого типа, определяющую количество корней квадратного уравнения A·x 2 + B·x + C = 0 (A, B, C — вещественные параметры, A 6 = 0).
	//С ее помощью найти количество корней для каждого из трех квадратных уравнений с данными коэффициентами.
		//Количество корней определять по значению дискриминанта : D = B^2 − 4·A·C
    

	double A1, B1, C1;
	for(int i = 1; i <= 3; i++){ 
	std::cin >> A1 >> B1 >> C1; 
	std::cout << "Колличество корней:" << rootscount(A1, B1, C1) << std::endl; 
	}

//Описать функцию CircleS(R) вещественного типа, находящую площадь круга радиуса R (R — вещественное). С помощью этой функции найти площади трех кругов с данными радиусами.
	//Площадь круга радиуса R вычисляется по формуле S = π·R^2.В качестве значения π использовать 3.14.
	double R1; 
	for (int i1 = 1; i1 <= 3; i1++) {
		std::cin >> R1; 
		std::cout << "Площадь круга:" << CircleS(R1);
	}

//. Описать функцию RingS(R1, R2) вещественного типа, находящую площадь кольца, заключенного между двумя окружностями с общим центром и радиусами R1 и R2(R1 и R2 — вещественные, R1 > R2).
	//С ее помощью найти площади трех колец, для которых даны внешние и внутренние радиусы.
	//Воспользоваться формулой площади круга радиуса R: S = π·R^2.Вкачестве значения π использовать 3.14.
	double R1, R2; 
	for (int i2 = 1; i2 <= 3; i2++) {
		std::cin >> R1 >> R2; 
		std::cout << "Площадь:" << RingS(R1, R2) << std::endl;
		
	}

	//Описать функцию TriangleP(a, h), находящую периметр равнобедренного треугольника по его основанию a и высоте h, проведенной к основанию(a и h — вещественные).
	//С помощью этой функции найти периметры трех треугольников, для которых даны основания и высоты.
	//Для нахождения боковой стороны b треугольника использовать теорему Пифагора :
	//b^2 = (a / 2)2 + h^2.
	double A, B;
		for(int i3 = 1; i3 <= 3; i3++) {
			std::cin >> A >> B;  
			std::cout << "Периметр:" << B + B + A << std::endl; 
		}*/

	// Описать функцию SumRange(A, B) целого типа, находящую сумму всех целых чисел от A до B включительно(A и B — целые).
	//Если A > B,то функция возвращает 0. 
	//С помощью этой функции найти суммы чисел от A до B и от B до C, если даны числа A, B, C

return 0; 
}
